import e,{useRef as t,useState as r,createContext as n,useContext as o}from"react";function a(){return(a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}const l=e=>{const t=(e.enctype||"").toLowerCase(),r=new FormData(e);if("multipart/form-data"===t)return r;const n={};for(let e of r.keys()){const t=e.replace(/\[\]$/,"");n[t]=r.getAll(e),1===n[t].length&&(n[t]=n[t][0]),""===n[t]&&delete n[t]}return n},c=n({});function i({children:e}){const{error:t,handled:r}=o(c);r.current=!0;const n=t?t.message:"";return e?"function"==typeof e?e(n,t):t?e:null:n||null}function u({children:e}){const{loading:t}=o(c);return"function"==typeof e?e(t):t?e:null}export default function({onSubmit:n,onError:o=(e=>console.error(e)),onChange:i,autoReset:u,children:s,...f}){const d=t(!1),[p,g]=r(!1),[m,h]=r(!1);if(!n&&!i)throw new Error("onSubmit() callback is required");return e.createElement("form",a({onSubmit:async e=>{try{e.persist(),e.preventDefault(),g(!0),await n(l(e.target)),u&&e.target.reset()}catch(e){h(e),o(e)}finally{g(!1)}},onChange:e=>i?i(l(e.currentTarget)):null},f),e.createElement(c.Provider,{value:{loading:p,error:m,handled:d}},e.createElement("fieldset",{style:{padding:0,margin:0,border:"none"},disabled:p},s)))}export{c as FormContext,i as FormError,u as FormLoading};
